<!doctype html>
<meta charset=utf-8>
<meta content="width=device-width,initial-scale=1" name=viewport>
<title>opengl.c + opengl.h</title>
<link href=../../../common/css/writings.css rel=stylesheet>

<a href=../../../index.htm>iterami</a>/<a href=../../index.htm>Docs.htm</a>/<a href=../c.htm>common C Projects</a>/<a class=external href=https://github.com/iterami/common/blob/gh-pages/c/opengl.c rel=noopener>opengl.c</a> + <a class=external href=https://github.com/iterami/common/blob/gh-pages/c/opengl.h rel=noopener>opengl.h</a>
<ul>
  <li>Includes:<ul>
    <li><a href=gtk.htm>"gtk.c"</a>
    <li><a href=json.htm>"json.c"</a>
    <li><a href=math.htm>"math.c"</a>
  </ul>
  <li>Functions:<ul>
    <li><a href=#opengl_billboard>void opengl_billboard(const int id, gboolean x, gboolean y, gboolean z)</a>
    <li><a href=#opengl_camera_free_keypress>gboolean opengl_camera_free_keypress(GtkWidget *widget, GdkEventKey *event, gpointer data)</a>
    <li><a href=#opengl_camera_free_keyrelease>gboolean opengl_camera_free_keyrelease(GtkWidget *widget, GdkEventKey *event, gpointer data)</a>
    <li><a href=#opengl_camera_free_mousemove>gboolean opengl_camera_free_mousemove(GtkWidget *widget, GdkEventMotion *event, gpointer data)</a>
    <li><a href=#opengl_camera=free_mousepress>gboolean opengl_camera_free_mousepress(GtkWidget *widget, GdkEventButton *event, gpointer data)</a>
    <li><a href=#opengl_camera_free_mouserelease>gboolean opengl_camera_free_mouserelease(GtkWidget *widget, GdkEventButton *event, gpointer data)</a>
    <li><a href=#opengl_camera_init_free>void opengl_camera_init_free(void)</a>
    <li><a href=#opengl_camera_move>void opengl_camera_move(const float speed, const gboolean strafe)</a>
    <li><a href=#opengl_camera_origin>void opengl_camera_origin(void)</a>
    <li><a href=#opengl_camera_rotate>void opengl_camera_rotate(const float x, const float y, const float z)</a>
    <li><a href=#opengl_camera_rotation_clamp>void opengl_camera_rotation_clamp(void)</a>
    <li><a href=#opengl_camera_set_rotation>void opengl_camera_set_rotation(const float x, const float y, const float z)</a>
    <li><a href=#opengl_camera_set_translation>void opengl_camera_set_translation(const float x, const float y, const float z)</a>
    <li><a href=#opengl_camera_translate>void opengl_camera_translate(const float x, const float y, const float z)</a>
    <li><a href=#opengl_clearcolor_set>void opengl_clearcolor_set(const float red, const float green, const float blue, const float alpha)</a>
    <li><a href=#opengl_entity_bind>void opengl_entity_bind(const int id)</a>
    <li><a href=#opengl_entity_draw>void opengl_entity_draw(const int id)</a>
    <li><a href=#opengl_events_init>void opengl_events_init(GtkWidget *_glarea)</a>
    <li><a href=#opengl_generate_all>void opengl_generate_all(void)</a>
    <li><a href=#opengl_load_level>void opengl_load_level(const gchar *filename)</a>
    <li><a href=#opengl_group_add>void opengl_group_add(groupstruct *group, entitystruct *entity)</a>
    <li><a href=#opengl_group_modify>void opengl_group_modify(groupstruct *group)</a>
    <li><a href=#opengl_group_move>void opengl_group_move(groupstruct *oldgroup, entitystruct *entity, groupstruct *newgroup)</a>
    <li><a href=#opengl_group_remove>void opengl_group_remove(groupstruct *group, entitystruct *entity)</a>
    <li><a href=#opengl_group_remove_all>void opengl_group_remove_all(groupstruct *group)</a>
    <li><a href=#opengl_groups_create>void opengl_groups_create(const gchar *new_groups[], const int count)</a>
    <li><a href=#opengl_logicloop>void opengl_logicloop(void)</a>
    <li><a href=#opengl_realize>void opengl_realize(GtkGLArea *area)</a>
    <li><a href=#opengl_render>gboolean opengl_render(GtkGLArea *area, GdkGLContext *context)</a>
    <li><a href=#opengl_resize>void opengl_resize(GtkGLArea *_glarea, gint width, gint height, gpointer data)</a>
    <li><a href=#opengl_string_to_primitive>int opengl_string_to_primitive(const gchar *string)</a>
  </ul>
</ul>
<hr id=opengl_billboard>
void opengl_billboard(const int id, gboolean x, gboolean y, gboolean z)
<ul>
  <li>Billboards an entity by making it face towards the camera on any of the 3 axes.
</ul>
<table>
  <tr class=header>
    <td>Arg
    <td>Type
    <td>Notes
  <tr>
    <td>id
    <td>int
    <td>
  <tr>
    <td>x
    <td>gboolean
    <td>
  <tr>
    <td>y
    <td>gboolean
    <td>
  <tr>
    <td>z
    <td>gboolean
    <td>
</table>
<hr id=opengl_camera_free_keypress>
gboolean opengl_camera_free_keypress(GtkWidget *widget, GdkEventKey *event, gpointer data)
<ul>
  <li>Handles free movement camera keypress events.
</ul>
<table>
  <tr class=header>
    <td>Arg
    <td>Type
    <td>Notes
  <tr>
    <td>widget
    <td>GtkWidget*
    <td>
  <tr>
    <td>event
    <td>GdkEventKey*
    <td>
  <tr>
    <td>data
    <td>gpointer
    <td>
</table>
<hr id=opengl_camera_free_keyrelease>
gboolean opengl_camera_free_keyrelease(GtkWidget *widget, GdkEventKey *event, gpointer data)
<ul>
  <li>Handles free movement camera keyrelease events.
</ul>
<table>
  <tr class=header>
    <td>Arg
    <td>Type
    <td>Notes
  <tr>
    <td>widget
    <td>GtkWidget*
    <td>
  <tr>
    <td>event
    <td>GdkEventKey*
    <td>
  <tr>
    <td>data
    <td>gpointer
    <td>
</table>
<hr id=opengl_camera_free_mousemove>
gboolean opengl_camera_free_mousemove(GtkWidget *widget, GdkEventMotion *event, gpointer data)
<ul>
  <li>Handles free movement camera mousemove events.
</ul>
<table>
  <tr class=header>
    <td>Arg
    <td>Type
    <td>Notes
  <tr>
    <td>widget
    <td>GtkWidget*
    <td>
  <tr>
    <td>event
    <td>GdkEventMotion*
    <td>
  <tr>
    <td>data
    <td>gpointer
    <td>
</table>
<hr id=opengl_camera_free_mousepress>
gboolean opengl_camera_free_mousepress(GtkWidget *widget, GdkEventButton *event, gpointer data)
<ul>
  <li>Handles free movement camera mousepress events.
</ul>
<table>
  <tr class=header>
    <td>Arg
    <td>Type
    <td>Notes
  <tr>
    <td>widget
    <td>GtkWidget*
    <td>
  <tr>
    <td>event
    <td>GdkEventButton*
    <td>
  <tr>
    <td>data
    <td>gpointer
    <td>
</table>
<hr id=opengl_camera_free_mouserelease>
gboolean opengl_camera_free_mouserelease(GtkWidget *widget, GdkEventButton *event, gpointer data)
<ul>
  <li>Handles free movement camera mouserelease events.
</ul>
<table>
  <tr class=header>
    <td>Arg
    <td>Type
    <td>Notes
  <tr>
    <td>widget
    <td>GtkWidget*
    <td>
  <tr>
    <td>event
    <td>GdkEventButton*
    <td>
  <tr>
    <td>data
    <td>gpointer
    <td>
</table>
<hr id=opengl_camera_init_free>
void opengl_camera_init_free(void)
<ul>
  <li>Inits the free movement camera.
</ul>
<hr id=opengl_camera_move>
void opengl_camera_move(const float speed, const gboolean strafe)
<ul>
  <li>Moves the camera forward at speed, optionally strafing.
</ul>
<table>
  <tr class=header>
    <td>Arg
    <td>Type
    <td>Notes
  <tr>
    <td>speed
    <td>float
    <td>
  <tr>
    <td>strafe
    <td>gboolean
    <td>
</table>
<hr id=opengl_camera_origin>
void opengl_camera_origin(void)
<ul>
  <li>Returns the camera to the origin and resets its rotation.
</ul>
<hr id=opengl_camera_rotate>
void opengl_camera_rotate(const float x, const float y, const float z)
<ul>
  <li>Rotates the camera by a specific amount of degrees.
</ul>
<table>
  <tr class=header>
    <td>Arg
    <td>Type
    <td>Notes
  <tr>
    <td>x
    <td>float
    <td>
  <tr>
    <td>y
    <td>float
    <td>
  <tr>
    <td>z
    <td>float
    <td>
</table>
<hr id=opengl_camera_rotation_clamp>
void opengl_camera_rotation_clamp(void)
<ul>
  <li>akes sure camera rotation is never less than 0 degrees or greater than 360 degrees.
</ul>
<hr id=opengl_camera_set_rotation>
void opengl_camera_set_rotation(const float x, const float y, const float z)
<ul>
  <li>Sets the camera rotation to a specific amount of degrees.
</ul>
<table>
  <tr class=header>
    <td>Arg
    <td>Type
    <td>Notes
  <tr>
    <td>x
    <td>float
    <td>
  <tr>
    <td>y
    <td>float
    <td>
  <tr>
    <td>z
    <td>float
    <td>
</table>
<hr id=opengl_camera_set_translation>
void opengl_camera_set_translation(const float x, const float y, const float z)
<ul>
  <li>Sets the camera translation to a specific location.
</ul>
<table>
  <tr class=header>
    <td>Arg
    <td>Type
    <td>Notes
  <tr>
    <td>x
    <td>float
    <td>
  <tr>
    <td>y
    <td>float
    <td>
  <tr>
    <td>z
    <td>float
    <td>
</table>
<hr id=opengl_camera_translate>
void opengl_camera_translate(const float x, const float y, const float z)
<ul>
  <li>Translates the camera by a specific amount.
</ul>
<table>
  <tr class=header>
    <td>Arg
    <td>Type
    <td>Notes
  <tr>
    <td>x
    <td>float
    <td>
  <tr>
    <td>y
    <td>float
    <td>
  <tr>
    <td>z
    <td>float
    <td>
</table>
<hr id=opengl_clearcolor_set>
void opengl_clearcolor_set(const float red, const float green, const float blue, const float alpha)
<ul>
  <li>Sets the current clear color.
</ul>
<table>
  <tr class=header>
    <td>Arg
    <td>Type
    <td>Notes
  <tr>
    <td>red
    <td>float
    <td>
  <tr>
    <td>green
    <td>float
    <td>
  <tr>
    <td>blue
    <td>float
    <td>
  <tr>
    <td>alpha
    <td>float
    <td>
</table>
<hr id=opengl_entity_bind>
void opengl_entity_bind(const int id)
<ul>
  <li>Bind various OpenGL buffers for an entity.
</ul>
<table>
  <tr class=header>
    <td>Arg
    <td>Type
    <td>Notes
  <tr>
    <td>id
    <td>int
    <td>
</table>
<hr id=opengl_entity_draw>
void opengl_entity_draw(const int id)
<ul>
  <li>Draw an entity that has already been created.
</ul>
<table>
  <tr class=header>
    <td>Arg
    <td>Type
    <td>Notes
  <tr>
    <td>id
    <td>int
    <td>
</table>
<hr id=opengl_events_init>
void opengl_events_init(GtkWidget *_glarea)
<ul>
  <li>Sets up signals and events for the "_glarea".
</ul>
<table>
  <tr class=header>
    <td>Arg
    <td>Type
    <td>Notes
  <tr>
    <td>_glarea
    <td>GtkWidget*
    <td>
</table>
<hr id=opengl_generate_all>
void opengl_generate_all(void)
<ul>
  <li>Generates required arrays and buffers.
</ul>
<hr id=opengl_group_add>
void opengl_group_add(groupstruct *group, entitystruct *entity)
<ul>
  <li>Adds an entity to a group.
</ul>
<table>
  <tr class=header>
    <td>Arg
    <td>Type
    <td>Notes
  <tr>
    <td>group
    <td>groupstruct*
    <td>
  <tr>
    <td>entity
    <td>entitystruct*
    <td>
</table>
<hr id=opengl_group_modify>
void opengl_group_modify(groupstruct *group)
<ul>
  <li>Not yet functional.
</ul>
<table>
  <tr class=header>
    <td>Arg
    <td>Type
    <td>Notes
  <tr>
    <td>group
    <td>groupstruct*
    <td>
</table>
<hr id=opengl_group_move>
void opengl_group_move(groupstruct *oldgroup, entitystruct *entity, groupstruct *newgroup)
<ul>
  <li>Moves an entity from 1 group to another group.
</ul>
<table>
  <tr class=header>
    <td>Arg
    <td>Type
    <td>Notes
  <tr>
    <td>oldgroup
    <td>groupstruct*
    <td>
  <tr>
    <td>newgroup
    <td>groupstruct*
    <td>
</table>
<hr id=opengl_group_remove>
void opengl_group_remove(groupstruct *group, entitystruct *entity)
<ul>
  <li>Removes an entity from a group.
</ul>
<table>
  <tr class=header>
    <td>Arg
    <td>Type
    <td>Notes
  <tr>
    <td>group
    <td>groupstruct*
    <td>
  <tr>
    <td>entity
    <td>entitystruct*
    <td>
</table>
<hr id=opengl_group_remove_all>
void opengl_group_remove_all(groupstruct *group)
<ul>
  <li>Removes all entities from a group.
</ul>
<table>
  <tr class=header>
    <td>Arg
    <td>Type
    <td>Notes
  <tr>
    <td>group
    <td>groupstruct*
    <td>
</table>
<hr id=opengl_groups_create>
void opengl_groups_create(const gchar *new_groups[], const int count)
<ul>
  <li>Mallocs and populates an array of empty "groupstruct" structs.
</ul>
<table>
  <tr class=header>
    <td>Arg
    <td>Type
    <td>Notes
  <tr>
    <td>new_groups
    <td>gchar*
    <td>
  <tr>
    <td>count
    <td>int
    <td>
</table>
<hr id=opengl_load_level>
void opengl_load_level(const gchar *filename)
<ul>
  <li>Load a level from a custom level format file.
</ul>
<table>
  <tr class=header>
    <td>Arg
    <td>Type
    <td>Notes
  <tr>
    <td>char
    <td>gchar*
    <td>
</table>
<hr id=opengl_logicloop>
void opengl_logicloop(void)
<ul>
  <li>Called by a "g_timeout_add()" within "realize()".
</ul>
<table>
  <tr class=header>
    <td>Arg
    <td>Type
    <td>Notes
  <tr>
    <td>
    <td>
    <td>
</table>
<hr id=opengl_realize>
void opengl_realize(GtkGLArea *area)
<ul>
  <li>Function called when a GtkGLArea is created.
</ul>
<table>
  <tr class=header>
    <td>Arg
    <td>Type
    <td>Notes
  <tr>
    <td>area
    <td>GtkGLArea*
    <td>
</table>
<hr id=opengl_render>
gboolean opengl_render(GtkGLArea *area, GdkGLContext *context)
<ul>
  <li>Function called when a GtkGLArea is drawn.
</ul>
<table>
  <tr class=header>
    <td>Arg
    <td>Type
    <td>Notes
  <tr>
    <td>area
    <td>GtkGLArea*
    <td>
  <tr>
    <td>context
    <td>GdkGLContext*
    <td>
</table>
<hr id=opengl_resize>
void opengl_resize(GtkGLArea *_glarea, gint width, gint height, gpointer data)
<ul>
  <li>Function called when a GtkGLArea is resized.
</ul>
<table>
  <tr class=header>
    <td>Arg
    <td>Type
    <td>Notes
  <tr>
    <td>_glarea
    <td>GtkGLArea*
    <td>
  <tr>
    <td>width
    <td>gint
    <td>
  <tr>
    <td>height
    <td>gint
    <td>
  <tr>
    <td>data
    <td>gpointer
    <td>
</table>
<hr id=opengl_string_to_primitive>
int opengl_string_to_primitive(const gchar *string)
<ul>
  <li>Return a defined constant for OpenGL primitive types based on the contents of a string.
</ul>
<table>
  <tr class=header>
    <td>Arg
    <td>Type
    <td>Notes
  <tr>
    <td>string
    <td>gchar*
    <td>
</table>
