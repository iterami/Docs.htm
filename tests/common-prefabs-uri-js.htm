<!doctype html>
<meta charset=utf-8>
<meta content="width=device-width,initial-scale=1" name=viewport>
<title>common prefabs/uri.js Tests</title>
<link href=../../common/css/core.css rel=stylesheet>

<a href=../../index.htm>iterami</a>/<a href=../index.htm>Docs.htm</a>/<a href=index.htm>Tests</a>/<a href=../../common/index.htm>common</a>/<a href=../common/js/prefabs/uri.htm>prefabs/uri.js</a><br>
<canvas id=canvas-animated></canvas>
<select id=direction-x>
  <option value=1>+1
  <option value=0>0
  <option value=-1>-1
</select>
<select id=direction-y>
  <option value=1>+1
  <option value=0>0
  <option value=-1>-1
</select>
<table>
  <thead>
    <tr class=header>
      <td>Canvas
      <td>ID
      <td>Dimensions
      <td>Size
      <td>URI
      <td>Animate
  <tbody id=results>
</table>

<script src=../../common/js/core.js></script>
<script src=../../common/js/prefabs/uri.js></script>
<script>
function animate_uri(){
    const height = core_images[uri]['height'];
    const width = core_images[uri]['width'];

    core_elements['canvas-animated'].height = height;
    core_elements['canvas-animated'].width = width;

    const canvas = core_elements['canvas-animated'].getContext('2d');
    canvas.fillStyle = canvas.createPattern(
      core_images[uri],
      'repeat'
    );
    canvas.translate(
      offset_x,
      offset_y
    );
    canvas.fillRect(
      -width,
      -height,
      width * 2,
      height * 2,
    );

    offset_x += Number(core_elements['direction-x'].value);
    if(offset_x <= 0){
        offset_x = core_images[uri]['width'];

    }else if(offset_x >= core_images[uri]['width']){
        offset_x = 0;
    }

    offset_y += Number(core_elements['direction-y'].value);
    if(offset_y <= 0){
        offset_y = core_images[uri]['height'];

    }else if(offset_y >= core_images[uri]['height']){
        offset_y = 0;
    }
}

function repo_init(){
    core_repo_init({
      'globals': {
        'offset_x': 0,
        'offset_y': 0,
        'uri': '',
      },
      'title': 'Docs.htm',
      'ui-elements': [
        'canvas-animated',
        'direction-x',
        'direction-y',
      ],
    });

    let results = '';
    for(let uri in uris){
        results += '<tr><td><canvas id="canvas-' + uri + '"></canvas>'
          + '<td><a href="#' + uri + '">' + uri + '</a>'
          + '<td><span id="height-' + uri + '"></span> x <span id="width-' + uri + '"></span>'
          + '<td><span id="size-' + uri + '"></span> B'
          + '<td><textarea id="' + uri + '" readonly>' + uris[uri] + '</textarea>'
          + '<td><input onclick=setup_uri("' + uri + '") type=button value=Animate>';
    }
    document.getElementById('results').innerHTML = results;

    for(const uri in uris){
        core_image({
          'id': uri,
          'src': uris[uri],
          'todo': function(){
              const canvas_element = document.getElementById('canvas-' + uri);

              canvas_element.height = core_images[uri]['height'];
              canvas_element.width = core_images[uri]['width'];
              canvas_element.style.border = 'solid 10px #000';
              canvas_element.style.display = 'inline';

              const canvas = canvas_element.getContext('2d');
              canvas.drawImage(
                core_images[uri],
                0,
                0
              );

              document.getElementById('height-' + uri).textContent = core_images[uri]['height'];
              document.getElementById('width-' + uri).textContent = core_images[uri]['width'];
              document.getElementById('size-' + uri).textContent = document.getElementById(uri).value.length;
          },
        });
    }

    core_elements['canvas-animated'].height = 1;
    core_elements['canvas-animated'].width = 1;
}

function setup_uri(id){
    offset_x = 0;
    offset_y = 0;
    uri = id;

    core_interval_modify({
      'id': 'interval',
      'interval': 100,
      'todo': animate_uri,
    });
}
</script>
