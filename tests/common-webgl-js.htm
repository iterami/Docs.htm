<!doctype html>
<meta charset=utf-8>
<meta content="width=device-width,initial-scale=1" name=viewport>
<title>common webgl.js Tests</title>
<link href=../../common/css/core.css rel=stylesheet>
<style>
canvas{
    display: none;
}
pre{
    margin: 0;
}
</style>

<a href=../../index.htm>iterami</a>/<a href=../index.htm>Docs.htm</a>/<a href=index.htm>Tests</a>/<a href=../../common/index.htm>common</a>/<a href=../common/js/webgl.htm>webgl.js</a>
<ul>
  <li><a href=multiverse/test-1stperson/index.htm>1st Person Standalone WebGL Game Test</a>
  <li><a href=multiverse/test-3rdperson/index.htm>3rd Person Standalone WebGL Game Test</a>
  <li><a href=common-webgl-levels.htm>Test Levels</a>
</ul>
<table class=left id=results></table>

<script src=../../common/js/core.js></script>
<script src=../../common/js/test.js></script>
<script src=../../common/js/math.js></script>
<script src=../../common/js/entity.js></script>
<script src=../../common/js/webgl.js></script>
<script>
function repo_init(){
    core_repo_init({
      'title': 'Docs.htm',
    });
    webgl_level_load({
      'character': -1,
    });
    webgl_character_init({
      'id': 'test-character-0',
    });

    document.getElementById('results').innerHTML = test_run({
      'link': '../common/js/',
      'tests': [
        {
          'args': {
            'id': 'test-character-1',
            'level': 5,
          },
          'expect': function(result){
              return webgl_characters['test-character-1']['health'] > 0;
          },
          'function': 'webgl_character_init',
        },
        {
          'args': void 0,
          'expect': -1,
          'function': 'webgl_character_level',
        },
        {
          'args': 'fake-character',
          'expect': -2,
          'function': 'webgl_character_level',
        },
        {
          'args': 'test-character-1',
          'expect': 5,
          'function': 'webgl_character_level',
        },
        {
          'args': {
            'green': 1,
          },
          'expect': function(result){
              return webgl_properties['clearcolor-blue'] === 0
                && webgl_properties['clearcolor-green'] === 1
                && webgl_properties['clearcolor-red'] === 0;
          },
          'function': 'webgl_clearcolor_set',
        },
        {
          'args': {
            'rotate-x': webgl_characters['test-character-0']['rotate-x'],
            'rotate-y': webgl_characters['test-character-0']['rotate-y'],
            'rotate-z': webgl_characters['test-character-0']['rotate-z'],
            'vertices-length': 1,
          },
          'expect': [
            0,
            1,
            0,
          ],
          'function': 'webgl_normals',
        },
        {
          'args': {
            'x': 0,
            'y': 0,
          },
          'expect': [
            0,
            0,
            0,
            0,
          ],
          'function': 'webgl_pick_color',
        },
        {
          'args': {
            'colors': [
              0,
              1,
              0,
              1,
            ],
            'vertexcount': 2,
          },
          'expect': [
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
          ],
          'function': 'webgl_vertexcolorarray',
        },
      ],
    });
}

function repo_logic(){
}
</script>
