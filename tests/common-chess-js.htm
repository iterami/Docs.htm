<!doctype html>
<meta charset=utf-8>
<meta content="width=device-width,initial-scale=1" name=viewport>
<title>common chess.js Tests</title>
<link href=../../common/css/core.css rel=stylesheet>
<style>
#chess td{
    border: 0;
    color: #000;
    cursor: pointer;
    font-size: 64px;
    line-height: 64px;
    user-select: none;
    width: 64px;
}
#chess td.file{
    line-height: 1em;
}
#chess td:hover{
    color: #070;
}
#chess td.notation{
    background-color: #000 !important;
    color: #aaa;
    cursor: auto;
    font-size: 150%;
    width: 1px;
}
#chess td.selected{
    color: #0b0;
}
#chess tr:nth-child(even) td:nth-child(even),
#chess tr:nth-child(odd) td:nth-child(odd){
    background-color: #aaa;
}
#chess tr:nth-child(even) td:nth-child(odd),
#chess tr:nth-child(odd) td:nth-child(even){
    background-color: #fff;
}
table{
    display: inline-block;
    vertical-align: top;
}
.taken{
    background-color: #aaa;
    color: #000;
}
</style>

<a href=../../index.htm>iterami</a>/<a href=../index.htm>Docs.htm</a>/<a href=index.htm>Tests</a>/<a href=../../common/index.htm>common</a>/<a href=../common/js/chess.htm>chess.js</a><br>
<table id=chess></table>
<table>
  <tr>
    <td class=big colspan=2><span id=turn></span>'s Turn<br>State: <span id=state></span>
  <tr class=taken>
    <td class=big colspan=2 id=black-pieces-taken>
  <tr class=taken>
    <td class=big colspan=2 id=white-pieces-taken>
  <tr class=header>
    <td>chess_move()
    <td>Response
  <tr>
    <td>50-moves
    <td id=50-moves>
  <tr>
    <td>castling
    <td id=castling>
  <tr>
    <td>en-passant
    <td id=en-passant>
  <tr>
    <td>en-passant-taken
    <td id=en-passant-taken>
  <tr>
    <td>king-checked
    <td id=king-checked>
  <tr>
    <td>king-checked-enemy
    <td id=king-checked-enemy>
  <tr>
    <td>king-moved
    <td id=king-moved>
  <tr>
    <td>pawn-promote
    <td id=pawn-promote>
  <tr>
    <td>rook-long-moved
    <td id=rook-long-moved>
  <tr>
    <td>rook-short-moved
    <td id=rook-short-moved>
  <tr>
    <td>threefold
    <td id=threefold>
  <tr>
    <td>valid
    <td id=valid>
  <tr class=header>
    <td>Black <select><option>Human</select>
    <td>State
  <tr>
    <td>king
    <td id=black-king>
  <tr>
    <td>king-checked
    <td id=black-king-checked>
  <tr>
    <td>king-moved
    <td id=black-king-moved>
  <tr>
    <td>pawn-promote
    <td><select onchange="update_board()" id=black-pawn-promote>
      <option value=2>Bishop
      <option value=1>Knight
      <option value=4 selected>Queen
      <option value=3>Rook
    </select>
  <tr>
    <td>rook-long-moved
    <td id=black-rook-long-moved>
  <tr>
    <td>rook-short-moved
    <td id=black-rook-short-moved>
  <tr>
    <td>time
    <td id=black-time>
  <tr class=header>
    <td>White <select><option>Human</select>
    <td>State
  <tr>
    <td>king
    <td id=white-king>
  <tr>
    <td>king-checked
    <td id=white-king-checked>
  <tr>
    <td>king-moved
    <td id=white-king-moved>
  <tr>
    <td>pawn-promote
    <td><select onchange="update_board()" id=white-pawn-promote>
      <option value=2>Bishop
      <option value=1>Knight
      <option value=4 selected>Queen
      <option value=3>Rook
    </select>
  <tr>
    <td>rook-long-moved
    <td id=white-rook-long-moved>
  <tr>
    <td>rook-short-moved
    <td id=white-rook-short-moved>
  <tr>
    <td>time
    <td id=white-time>
  <tr>
    <td colspan=2><button onclick="rotate_board()" type=button>Rotate Board</button><button onclick="reset_board(true)" type=button>Reset</button><button onclick="update_board()" type=button>Update</button><br>
<input onclick="override=!override" type=checkbox> Override Rules<br>
<input checked onclick="threefold=!threefold" type=checkbox> Threefold Repetition<br>
<input class=mini id=time min=-1 step=any type=number value=3600>+<input class=mini id=increment min=0 step=any type=number value=10>Time<br>
<button onclick="remove_selected()" type=button>Remove Selected Piece</button>
</table>

<script src=../../common/js/chess.js></script>
<script>
function create_board(){
    let board_html = '';
    for(let y = 0; y < 8; y++){
        board_html += '<tr><td class="notation right" id="rank-' + y + '">' + (8 - y);
        for(let x = 0; x < 8; x++){
            board_html += '<td id="' + chess_xy_to_fr(
              x,
              y
            ) + '" onclick="select_square(this.id)">';
        }
    }
    board_html += '<tr><td class="file notation"><td class="file notation" id="file-0">a<td class="file notation" id="file-1">b<td class="file notation" id="file-2">c<td class="file notation" id="file-3">d<td class="file notation" id="file-4">e<td class="file notation" id="file-5">f<td class="file notation" id="file-6">g<td class="file notation" id="file-7">h';

    document.getElementById('chess').innerHTML = board_html;
    update_board();
}

function remove_selected(){
    if(selected.length === 0
      || !globalThis.confirm('Remove selected piece?')){
        return;
    }

    const square_x = Number('abcdefgh'.indexOf(selected[0]));
    const square_y = Number(8 - selected[1]);

    chess_games['test']['board'][square_y][square_x] = '';
    selected = '';

    update_board();
}

function reset_board(reset){
    if(reset && !globalThis.confirm('Reset the entire board?')){
        return false;
    }

    globalThis.clearInterval(clock);
    clock_started = false;

    chess_new({
      'id': 'test',
      'increment': document.getElementById('increment').value,
      'time': document.getElementById('time').value,
    });
    next = '';
    previous = '';
    rotated = false;
    selected = '';

    create_board();
    document.getElementById('state').textContent = '';
}

function rotate_board(){
    rotated = !rotated;

    for(let y = 0; y < 8; y++){
        document.getElementById('rank-' + y).textContent = rotated
          ? y + 1
          : 8 - y;
        for(let x = 0; x < 8; x++){
            const square = document.getElementById(chess_xy_to_fr(
              rotated
                ? 7 - x
                : x,
              rotated
                ? 7 - y
                : y
            ));
            square.id = chess_xy_to_fr(
              rotated
                ? x
                : 7 - x,
              rotated
                ? y
                : 7 - y
            );
        }

        document.getElementById('file-' + y).textContent = 'abcdefgh'[rotated
          ? 7 - y
          : y];
    }

    update_board();
}

function second(){
    const player = chess_games['test']['player'];
    if(chess_games['test']['players'][player]['time'] <= 0){
        return;
    }
    chess_games['test']['players'][player]['time']--;
    document.getElementById(player
      ? 'black-time'
      : 'white-time').textContent = chess_games['test']['players'][player]['time'];
}

function select_square(id){
    if(selected.length){
        document.getElementById(selected).classList.remove('selected');
    }

    const square_x = Number('abcdefgh'.indexOf(id[0]));
    const square_y = Number(8 - id[1]);

    if(selected === id){
        selected = '';

    }else if(!selected.length){
        if(chess_games['test']['board'][square_y][square_x].length === 1){
            selected = id;
        }

    }else{
        const move = chess_move({
          'id': 'test',
          'override': override,
          'piece-x': Number('abcdefgh'.indexOf(selected[0])),
          'piece-y': Number(8 - selected[1]),
          'target-x': square_x,
          'target-y': square_y,
        });
        for(const property in move){
            const element = document.getElementById(property);
            if(element){
                element.textContent = move[property];
            }
        }

        if(override || move['valid']){
            next = id;
            previous = selected[0] + selected[1];
            selected = '';

            update_board();

        }else{
            selected = '';
        }

        if(!threefold){
            chess_games['test']['threefold'] = {};
        }

        if(!clock_started){
            clock_started = true;
            clock = globalThis.setInterval(
              second,
              1000
            );
        }
    }

    if(selected.length){
        document.getElementById(selected).classList.add('selected');
    }
}

function update_board(){
    chess_games['test']['players'][1]['pawn-promote'] = Number(document.getElementById('black-pawn-promote').value);
    chess_games['test']['players'][0]['pawn-promote'] = Number(document.getElementById('white-pawn-promote').value);

    document.getElementById('turn').textContent = chess_games['test']['player']
      ? 'Black'
      : 'White';
    document.getElementById('black-pieces-taken').textContent = chess_games['test']['players'][1]['pieces-taken'];
    document.getElementById('white-pieces-taken').textContent = chess_games['test']['players'][0]['pieces-taken'];

    document.getElementById('black-king').textContent = chess_xy_to_fr(
      chess_games['test']['players'][1]['king-x'],
      chess_games['test']['players'][1]['king-y']
    );
    document.getElementById('black-king-checked').textContent = chess_games['test']['players'][1]['king-checked'];
    document.getElementById('black-king-moved').textContent = chess_games['test']['players'][1]['king-moved'];
    document.getElementById('black-rook-long-moved').textContent = chess_games['test']['players'][1]['rook-long-moved'];
    document.getElementById('black-rook-short-moved').textContent = chess_games['test']['players'][1]['rook-short-moved'];
    document.getElementById('black-time').textContent = chess_games['test']['players'][1]['time'];

    document.getElementById('white-king').textContent = chess_xy_to_fr(
      chess_games['test']['players'][0]['king-x'],
      chess_games['test']['players'][0]['king-y']
    );
    document.getElementById('white-king-checked').textContent = chess_games['test']['players'][0]['king-checked'];
    document.getElementById('white-king-moved').textContent = chess_games['test']['players'][0]['king-moved'];
    document.getElementById('white-rook-long-moved').textContent = chess_games['test']['players'][0]['rook-long-moved'];
    document.getElementById('white-rook-short-moved').textContent = chess_games['test']['players'][0]['rook-short-moved'];
    document.getElementById('white-time').textContent = chess_games['test']['players'][0]['time'];

    for(let y = 0; y < 8; y++){
        for(let x = 0; x < 8; x++){
            const id = chess_xy_to_fr(x, y);
            const square = document.getElementById(id);

            square.innerHTML = chess_games['test']['board'][y][x] || '&nbsp;';
            square.style.backgroundColor = (id === previous || id === next)
              ? (x & 1 === y & 1
                  ? '#afa'
                  : '#7a7'
                )
              : '';
        }
    }
}

let clock = 0;
let clock_started = false;
let next = '';
let override = false;
let previous = '';
let rotated = false;
let selected = '';
let threefold = true;

reset_board(false);
</script>
