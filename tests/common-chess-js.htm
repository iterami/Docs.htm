<!doctype html>
<meta charset=utf-8>
<meta content="width=device-width,initial-scale=1" name=viewport>
<title>common chess.js Tests</title>
<link href=../../common/css/core.css rel=stylesheet>
<style>
.chess,
.inline{
    display: inline-block;
    vertical-align: top;
}
.chess td{
    border: 0;
    color: #000;
    cursor: pointer;
    font-size: 64px;
    line-height: 64px;
    user-select: none;
    width: 64px;
}
.chess td.bottom{
    line-height: 1em;
}
.chess td:hover{
    color: #070;
}
.chess td.selected{
    color: #0b0;
}
.chess td.notation{
    background-color: #000 !important;
    color: #aaa;
    cursor: auto;
    font-size: 150%;
}
.chess tr:nth-child(even) td:nth-child(even),
.chess tr:nth-child(odd) td:nth-child(odd){
    background-color: #aaa;
}
.chess tr:nth-child(even) td:nth-child(odd),
.chess tr:nth-child(odd) td:nth-child(even){
    background-color: #fff;
}
.taken{
    background-color: #aaa;
    color: #000;
}
</style>

<a href=../../index.htm>iterami</a>/<a href=../index.htm>Docs.htm</a>/<a href=index.htm>Tests</a>/<a href=../../common/index.htm>common</a>/<a href=../common/js/chess.htm>chess.js</a><br>
<table class="center chess" id=board></table>
<table class=inline>
  <tr>
    <td class=big colspan=2><span id=turn></span>'s Turn
  <tr class="big taken">
    <td colspan=2><div id=black-pieces-taken></div><div id=white-pieces-taken></div>
  <tr class=header>
    <td>chess_move()
    <td>Response
  <tr>
    <td>50-moves
    <td id=50-moves>
  <tr>
    <td>castling
    <td id=castling>
  <tr>
    <td>en-passant
    <td id=en-passant>
  <tr>
    <td>en-passant-taken
    <td id=en-passant-taken>
  <tr>
    <td>king-checked
    <td id=king-checked>
  <tr>
    <td>king-moved
    <td id=king-moved>
  <tr>
    <td>pawn-promote
    <td id=pawn-promote>
  <tr>
    <td>rook-long-moved
    <td id=rook-long-moved>
  <tr>
    <td>rook-short-moved
    <td id=rook-short-moved>
  <tr>
    <td>valid
    <td id=valid>
  <tr class=header>
    <td>Black Player
    <td>State
  <tr>
    <td>king
    <td id=black-king>
  <tr>
    <td>king-checked
    <td id=black-king-checked>
  <tr>
    <td>king-moved
    <td id=black-king-moved>
  <tr>
    <td>pawn-promote
    <td><select onchange="update_board()" id=black-pawn-promote>
      <option value=2>Bishop
      <option value=1>Knight
      <option value=4 selected>Queen
      <option value=3>Rook
    </select>
  <tr>
    <td>rook-long-moved
    <td id=black-rook-long-moved>
  <tr>
    <td>rook-short-moved
    <td id=black-rook-short-moved>
  <tr class=header>
    <td>White Player
    <td>State
  <tr>
    <td>king
    <td id=white-king>
  <tr>
    <td>king-checked
    <td id=white-king-checked>
  <tr>
    <td>king-moved
    <td id=white-king-moved>
  <tr>
    <td>pawn-promote
    <td><select onchange="update_board()" id=white-pawn-promote>
      <option value=2>Bishop
      <option value=1>Knight
      <option value=4 selected>Queen
      <option value=3>Rook
    </select>
  <tr>
    <td>rook-long-moved
    <td id=white-rook-long-moved>
  <tr>
    <td>rook-short-moved
    <td id=white-rook-short-moved>
  <tr>
    <td colspan=2><button onclick="reset_board(true)" type=button>Reset</button><button onclick="remove_pawns()" type=button>Remove Pawns</button><button onclick="update_board()" type=button>Update</button><br><input onclick="override=!override" type=checkbox> Override Rules
</table>

<script src=../../common/js/chess.js></script>
<script>
function remove_pawns(){
    if(!globalThis.confirm('Remove all pawns?')){
        return false;
    }

    for(let y = 0; y < 8; y++){
        for(let x = 0; x < 8; x++){
            const piece = document.getElementById(chess_xy_to_fr(x, y)).textContent;
            if(piece === chess_pieces[0][0] || piece === chess_pieces[1][0]){
                chess_games['test']['board'][y][x] = '';
            }
        }
    }

    update_board();
}

function reset_board(reset){
    if(reset && !globalThis.confirm('Reset the entire board?')){
        return false;
    }

    chess_new({
      'id': 'test',
    });
    next = '';
    previous = '';
    selected = '';
    update_board();
}

function select_square(id){
    if(selected.length){
        document.getElementById(selected).classList.remove('selected');
    }

    const square_x = Number('abcdefgh'.indexOf(id[0]));
    const square_y = Number(8 - id[1]);

    if(selected === id){
        selected = '';

    }else if(!selected.length){
        if(chess_games['test']['board'][square_y][square_x].length === 1){
            selected = id;
        }

    }else{
        const move = chess_move({
          'id': 'test',
          'override': override,
          'piece-x': Number('abcdefgh'.indexOf(selected[0])),
          'piece-y': Number(8 - selected[1]),
          'target-x': square_x,
          'target-y': square_y,
        });
        for(const property in move){
            const element = document.getElementById(property);
            if(element){
                element.textContent = move[property];
            }
        }

        if(override || move['valid']){
            next = id;
            previous = selected[0] + selected[1];
            selected = '';

            update_board();

        }else{
            selected = '';
        }
    }

    if(selected.length){
        document.getElementById(selected).classList.add('selected');
    }
}

function update_board(){
    chess_games['test']['players'][1]['pawn-promote'] = Number(document.getElementById('black-pawn-promote').value);
    chess_games['test']['players'][0]['pawn-promote'] = Number(document.getElementById('white-pawn-promote').value);

    document.getElementById('turn').textContent = chess_games['test']['player']
      ? 'Black'
      : 'White';
    document.getElementById('black-king').textContent = chess_xy_to_fr(
      chess_games['test']['players'][1]['king-x'],
      chess_games['test']['players'][1]['king-y']
    );
    document.getElementById('black-king-checked').textContent = chess_games['test']['players'][1]['king-checked'];
    document.getElementById('black-king-moved').textContent = chess_games['test']['players'][1]['king-moved'];
    document.getElementById('black-rook-long-moved').textContent = chess_games['test']['players'][1]['rook-long-moved'];
    document.getElementById('black-rook-short-moved').textContent = chess_games['test']['players'][1]['rook-short-moved'];
    document.getElementById('black-pieces-taken').textContent = chess_games['test']['players'][1]['pieces-taken'];
    document.getElementById('white-king').textContent = chess_xy_to_fr(
      chess_games['test']['players'][0]['king-x'],
      chess_games['test']['players'][0]['king-y']
    );
    document.getElementById('white-king-checked').textContent = chess_games['test']['players'][0]['king-checked'];
    document.getElementById('white-king-moved').textContent = chess_games['test']['players'][0]['king-moved'];
    document.getElementById('white-rook-long-moved').textContent = chess_games['test']['players'][0]['rook-long-moved'];
    document.getElementById('white-rook-short-moved').textContent = chess_games['test']['players'][0]['rook-short-moved'];
    document.getElementById('white-pieces-taken').textContent = chess_games['test']['players'][0]['pieces-taken'];
    for(let y = 0; y < 8; y++){
        for(let x = 0; x < 8; x++){
            const id = chess_xy_to_fr(x, y);
            const square = document.getElementById(id);

            square.innerHTML = chess_games['test']['board'][y][x] || '&nbsp;';
            square.style.backgroundColor = (id === previous || id === next)
              ? (x % 2 === y % 2
                  ? '#afa'
                  : '#7a7'
                )
              : '';
        }
    }
}

let next = '';
let override = false;
let previous = '';
let selected = '';

let board_html = '';
for(let y = 1; y < 9; y++){
    board_html += '<tr><td class="notation right">' + (9 - y);
    for(let x = 1; x < 9; x++){
        board_html += '<td id="' + chess_xy_to_fr(
          x - 1,
          y - 1
        ) + '" onclick="select_square(this.id)">';
    }
}
board_html += '<tr><td class="bottom notation"><td class="bottom notation">a<td class="bottom notation">b<td class="bottom notation">c<td class="bottom notation">d<td class="bottom notation">e<td class="bottom notation">f<td class="bottom notation">g<td class="bottom notation">h';
document.getElementById('board').innerHTML = board_html;

reset_board(false);
</script>
